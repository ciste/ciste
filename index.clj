{:namespaces
 ({:source-url nil,
   :wiki-url "ciste.commands-api.html",
   :name "ciste.commands",
   :doc nil}
  {:source-url nil,
   :wiki-url "ciste.config-api.html",
   :name "ciste.config",
   :author "Daniel E. Renfer <duck@kronkltd.net>",
   :doc
   "Ciste uses the config function in ciste.config to perform all the\nconfiguration. Config takes a variable number of key values and will\neither return a non-nil value if that option is defined, or will raise\nan exception if it is not.\n\nThe config information is read from the file \"config.clj\" at the base\nof the project's directory. The config file should contain a hash-map.\n\nThe top-level keys will be the names of environments. The values of\nthese keys will be an arbitrarily complex structure of hashes,\nvectors, and other data.\n\nExample:\n\n    (use 'ciste.config)\n    (load-config)\n    (set-environment! :default)\n    (config :option1) => \"foo\"\n    (config :option3) => [\"foo\" \"bar\" \"baz\"]\n    (config :option2 :title) => \"BAR\""}
  {:source-url nil,
   :wiki-url "ciste.core-api.html",
   :name "ciste.core",
   :author "Daniel E. Renfer <duck@kronkltd.net>",
   :doc
   "Any fundamental state changes in your application should take place\nthrough an action. Any time you create, update, or delete a resource,\nyou should use an action. Actions are analogous to the Controller in a\ntraditional MVC design.\n\nWhen an action is executed, if the config path [:print :actions] is\nenabled, then the action will be logged.\n\nActions are simply functions. An Action can take any number of\nparameters and should return any logically true value if the action\nsucceeded."}
  {:source-url nil,
   :wiki-url "ciste.debug-api.html",
   :name "ciste.debug",
   :author "Daniel E. Renfer <duck@kronkltd.net>",
   :doc
   "The ciste.debug namespace contains only a single macro: spy. Spy will\nlog the code it wraps as well as a pretty-printed version of it's\nvalue. That value will then be returned. This allows you to easily\nmonitor any bit of code by simply wrapping it with spy."}
  {:source-url nil,
   :wiki-url "ciste.filters-api.html",
   :name "ciste.filters",
   :author "Daniel E. Renfer <duck@kronkltd.net>",
   :doc
   "Filters are methods of the multimethod apply-filter. A Filter\ndispatches on the Action and the Serialization. A Filter takes 2\narguments: The Action, and the request map.\n\nIt is the job of the Filter to parse the request map and produce the\noptions to be passed to Action. The Filter must call that action with\nthe appropriate arguments.\n\nWhile it is possible to modify the response from the Action, it is\nrecommended that filters not modify responses. (That would belong in\nthe view.)\n\nExample:\n\n    (defaction login\n      [username password]\n      ;; Perform authentication\n      )\n\n    (deffilter #'login :http\n      [action request]\n      (let [{{:keys [username password]} :params}]\n        (action username password)))"}
  {:source-url nil,
   :wiki-url "ciste.formats-api.html",
   :name "ciste.formats",
   :doc nil}
  {:source-url nil,
   :wiki-url "ciste.middleware-api.html",
   :name "ciste.middleware",
   :doc nil}
  {:source-url nil,
   :wiki-url "ciste.predicates-api.html",
   :name "ciste.predicates",
   :doc nil}
  {:source-url nil,
   :wiki-url "ciste.routes-api.html",
   :name "ciste.routes",
   :author "Daniel E. Renfer <duck@kronkltd.net>",
   :doc
   "## Routing\n\nCiste's routing mechanism can be used in any situation where you have\na request that needs to be processed, possibly changing state,\nreturning a result that is then transformed into a desired output\nformat, and then either returned or processed in some other fashion.\n\n'resolve-routes' takes 2 parameters: a sequence of predicates, and a\nsequence of matcher pairs. A \"handler\" function is then returned that\ntakes a request map and then returns a response.\n\nWhen a request is being processed, Ciste will iterate over the\nsequence of matchers and apply the predicates. The first\nmatcher to return a non-nil result will then invoke its action.\n\nA matcher pair is a sequence containing 2 maps. The first map contains\ndata that will be used by the predicates to determine if the request\nis valid for the matcher. The section map contains information that\nwill be used if the matcher is selected.\n\nThe predicate sequence is a list of predicate functions. Each function\ntakes the matcher data as the first argument and the request as the\nsecond. Each predicate will perform some test, possibly using data\ncontained in the matcher map as its arguments. If the predicate\npasses, it returns a map containing the new request map for the next\nstep in the chain. Usually the request is simply returned unmodified.\n\n## Invoking an Action\n\nWhen a Ciste route is matched, invoke-action will perform a series of\nsteps, ultimately returning the final result.\n\nFirst, the Filter is called. The Filter will extract all of the\nnecessary parameters from the serialization-specific request and call\nthe serialization-agnostic Action. The Action will produce a result,\nwhich is then returned by the Filter.\n\nNext, the request map and the returned data are passed to the View\nfunction. Views are specific to the Format in use. The View will\ntransform the response data to a format acceptable to the downstream\nSerializer.\n\nWith the response data transformed into a format-specific view, a\ntemplate is then called, if enabled. This will attach any additional\nmarkup or perform any processing that is done to every request using\nthe same format that specifies that a template be used.\n\nThe next stage is to call the Formatter. This is the last stage that\nis specific to the format. This is where any intermediate data\nstructures are converted to types that can be used by\nserializers. Steps such as converting Hiccup vectors to strings should\nbe done here.\n\nFinally, the Serializer performs a last stage transform specific to\nthe Serialization type. Place things that need to apply to every\nrequest here. If Ciste is being used in a Ring application, there is\nno need to perform any IO, and the map can simply be returned. It is\npossible to write Serializers that will respond to a request by\ntransmitting the response in any number of ways. (XMPP, Email,\nFilesystem, etc.) "}
  {:source-url nil,
   :wiki-url "ciste.runner-api.html",
   :name "ciste.runner",
   :doc nil}
  {:source-url nil,
   :wiki-url "ciste.sections-api.html",
   :name "ciste.sections",
   :doc
   "Sections are a series of multimethods for generically transforming\nrecords into the most appropriate format.\n\nA Section dispatches on a Vector containing the type of the first\nargument or the type of the first element of the first argument if the\nSection has been defined as a :seq type, the Format, and\nthe Serialization. If no match is found, the final value is removed\nand tried again. This repeats until there is only the type.\n\nExample:\n\n    (declare-section show-section)\n    (declare-section index-section :seq)\n\n    (defsection show-section [User :html :http]\n      [user & options]\n      [:div\n        [:p \"Name: \" (:name user)]\n        [:p \"Email: \" (:email user)]])\n\n    (defsection index-section [User :html :http]\n      [users & options]\n      [:ul\n        (map\n          (fn [user]\n            [:li (show-section user)])\n          users)])"}
  {:source-url nil,
   :wiki-url "ciste.triggers-api.html",
   :name "ciste.triggers",
   :doc
   "Triggers allow you to have functions called as part of a seperate\nthread pool whenever a matching action is invoked.\n\nA Trigger is a function that takes 3 arguments: The action, the\nrequest map, and the response from invoking the action.\n\nAll of the dynamic bindings from the original request are coppied to\nthe trigger.\n\nExample:\n\n    (defaction my-action\n      [request]\n      {:foo 23, :bar 42})\n\n    (defn my-trigger\n      [action request record]\n      \"Do something in a different thread\")\n\n    (ciste.trigger/add-trigger! #'my-action #'my-trigger)"}
  {:source-url nil,
   :wiki-url "ciste.views-api.html",
   :name "ciste.views",
   :doc
   "A View is a pair of multi-methods: apply-view, and default-format. The\napply-view method dispatches on a vector containing the Action and the\nFormat. If no match is found this value, then default-format tries\nusing only Format.\n\nA View accepts two parameters: the request, and the response from\ninvoking the action. A View should render the supplied data into a\nstructure appropriate to the Format. It is not required, but this is\nmost commonly a map.\n\nExample:\n\n    (defview #'show :html\n      [request user]\n      {:status 200\n       :body [:div.user\n               [:p (:name user)]]})"}
  {:source-url nil,
   :wiki-url "ciste.workers-api.html",
   :name "ciste.workers",
   :author "Daniel E. Renfer <duck@kronkltd.net>",
   :doc
   "Workers are tasks that will repeatedly run. A worker can be started\nand stopped by any thread. When a worker is stopped, it will continue\nuntil the next time that it exits. You can check if it's stopping\nwithin your code if you wish to exit earlier.\n\n    (defworker :queue-checker\n      [queue-name]\n      (check-and-process-queue queue-name))\n\n    (start-worker! :queue-checker) => 1\n    (stop-worker! 1) => nil\n    (stop-all-workers!) => nil"}),
 :vars
 ({:name "*command-predicates*",
   :namespace "ciste.commands",
   :source-url nil,
   :dynamic true,
   :raw-source-url nil,
   :wiki-url
   "/ciste.commands-api.html#ciste.commands/*command-predicates*",
   :doc
   "The sequence of predicates used for command dispatch.\nBy default, commands are dispatched by name.",
   :var-type "var",
   :line 15,
   :file "src/ciste/commands.clj"}
  {:name "*commands*",
   :namespace "ciste.commands",
   :source-url nil,
   :dynamic true,
   :raw-source-url nil,
   :wiki-url "/ciste.commands-api.html#ciste.commands/*commands*",
   :doc "The sequence of commands that have been registered.",
   :var-type "var",
   :line 9,
   :file "src/ciste/commands.clj"}
  {:arglists ([name v]),
   :name "add-command!",
   :namespace "ciste.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.commands-api.html#ciste.commands/add-command!",
   :doc
   "Adds the fn identified by var v as the command handler for the given name.",
   :var-type "function",
   :line 22,
   :file "src/ciste/commands.clj"}
  {:arglists ([]),
   :name "command-names",
   :namespace "ciste.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.commands-api.html#ciste.commands/command-names",
   :doc "The names of all the registered commands.",
   :var-type "function",
   :line 44,
   :file "src/ciste/commands.clj"}
  {:arglists ([& opts]),
   :name "parse-command",
   :namespace "ciste.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.commands-api.html#ciste.commands/parse-command",
   :doc "Takes a sequence of key/value pairs and runs a command",
   :var-type "function",
   :line 28,
   :file "src/ciste/commands.clj"}
  {:name "*doc-maps*",
   :namespace "ciste.config",
   :source-url nil,
   :dynamic true,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/*doc-maps*",
   :doc "This is where config docs are kept",
   :var-type "var",
   :line 46,
   :file "src/ciste/config.clj"}
  {:name "*environment*",
   :namespace "ciste.config",
   :source-url nil,
   :dynamic true,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/*environment*",
   :doc
   "The current environment. use the set-environment!,\nenvironment, and with",
   :var-type "var",
   :line 34,
   :file "src/ciste/config.clj"}
  {:name "*environments*",
   :namespace "ciste.config",
   :source-url nil,
   :dynamic true,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/*environments*",
   :doc
   "The full config map for all environments is stored\nin this ref",
   :var-type "var",
   :line 40,
   :file "src/ciste/config.clj"}
  {:arglists ([& ks]),
   :name "config",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/config",
   :doc
   "Returns the option matching the key sequence in the global config map for the\ncurrently bound environment, defaulting to the :default environment.\n\nThrows an exception if the option can not be found",
   :var-type "function",
   :line 129,
   :file "src/ciste/config.clj"}
  {:arglists ([] [& ks]),
   :name "config*",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/config*",
   :doc
   "Like config, but does not throw an exception if the key cannot be found.",
   :var-type "function",
   :line 111,
   :file "src/ciste/config.clj"}
  {:arglists ([& body]),
   :name "definitializer",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/definitializer",
   :doc
   "Defines an initializer. When an environment is bound, the initializers will\nbe run in the order that they are loaded.\n\nInitializers are blocks of code that need to set up the environment of\nthe namespace, but cannot run until the configuration system is\navailable with a valid environment.\n\nWhenever the environment is changed, the initializers will run in the\norder they were declared.\n\nNote: At this time, Initializers will be re-run if the namespace is\nreloaded. For this reason, it is recommended that initializers be able\nto handle being run multiple times gracfully.\n\nExample:\n\n    (ns ciste.example\n      (:use [ciste.config :only (definitializer)]))\n\n    (definitializer\n      (println \"This will be run when the environment is set\")\n      (println (config :hostname)))\n\n    (println \"out of the initializer\"\n\n\n    > (use 'ciste.example)\n    out of the initializer\n    > (set-environment! :development)\n    This will be run when the environment is set\n    server1.example.com",
   :var-type "macro",
   :line 150,
   :file "src/ciste/config.clj"}
  {:arglists ([ks type docstring & body]),
   :name "describe-config",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/describe-config",
   :doc
   "Macro to record config information\n\nExample:\n\n    (describe-config [:print :request]\n      :boolean\n      \"Should the request be logged?\")",
   :var-type "macro",
   :line 211,
   :file "src/ciste/config.clj"}
  {:arglists ([& ks]),
   :name "doc",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/doc",
   :doc "Print out the documentation for the config path",
   :var-type "function",
   :line 226,
   :file "src/ciste/config.clj"}
  {:arglists ([]),
   :name "environment",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/environment",
   :doc
   "Returns the currently bound environment.\n\nThrows an exception if no environment is bound",
   :var-type "function",
   :line 67,
   :file "src/ciste/config.clj"}
  {:arglists ([]),
   :name "get-host-address",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/get-host-address",
   :doc "Returns the IP address of the host's local adapter",
   :var-type "function",
   :line 62,
   :file "src/ciste/config.clj"}
  {:arglists ([]),
   :name "get-host-name",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/get-host-name",
   :doc "Returns the hostname of the host's local adapter.",
   :var-type "function",
   :line 57,
   :file "src/ciste/config.clj"}
  {:arglists ([] [filename]),
   :name "load-config",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/load-config",
   :doc
   "Loads the config file into the environment.\n\nDefaults to config.clj if not specified",
   :var-type "function",
   :line 90,
   :file "src/ciste/config.clj"}
  {:arglists ([m1 m2]),
   :name "merge-config",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/merge-config",
   :doc
   "Recursively merges m1 into m2. If the value of any of the key is a map, the\nelements in that map are also merged",
   :var-type "function",
   :line 77,
   :file "src/ciste/config.clj"}
  {:arglists ([]),
   :name "run-initializers!",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/run-initializers!",
   :doc "Run all initializers",
   :var-type "function",
   :line 191,
   :file "src/ciste/config.clj"}
  {:arglists ([ks value]),
   :name "set-config!",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/set-config!",
   :doc
   "Set the value of the config setting matching the key sequence",
   :var-type "function",
   :line 142,
   :file "src/ciste/config.clj"}
  {:arglists ([env]),
   :name "set-environment!",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/set-environment!",
   :doc "Sets's the environment globally",
   :var-type "function",
   :line 197,
   :file "src/ciste/config.clj"}
  {:arglists ([environment & body]),
   :name "with-environment",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/with-environment",
   :doc "Run body with the evironment bound",
   :var-type "macro",
   :line 204,
   :file "src/ciste/config.clj"}
  {:arglists ([] [filename]),
   :name "write-config!",
   :namespace "ciste.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.config-api.html#ciste.config/write-config!",
   :doc "Write the current config settings to file",
   :var-type "function",
   :line 102,
   :file "src/ciste/config.clj"}
  {:name "*format*",
   :namespace "ciste.core",
   :source-url nil,
   :dynamic true,
   :raw-source-url nil,
   :wiki-url "/ciste.core-api.html#ciste.core/*format*",
   :doc
   "The current format in use. Rebind this var to set the format for the\ncurrent request.",
   :var-type "var",
   :line 21,
   :file "src/ciste/core.clj"}
  {:arglists ([name & forms]),
   :name "defaction",
   :namespace "ciste.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.core-api.html#ciste.core/defaction",
   :doc
   "Define an Action.\n\nAn Action is similar to a ordinary function except that it announces itself\nto the action channel, it logs it's execution and it executes any associated\ntriggers.\n\nConfig options used:\n\n* [:print :actions] - If true, this Action will log itself on every execution\n* [:use-pipeline] - If true, the result of executing this action will be\n  enqueued to the action channel.\n* [:run-triggers] - If true, associated triggers will be run after this\n  action executes.",
   :var-type "macro",
   :line 49,
   :file "src/ciste/core.clj"}
  {:arglists ([[serialization format] & body]),
   :name "with-context",
   :namespace "ciste.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.core-api.html#ciste.core/with-context",
   :doc "Set the bindings for both the serialization and the format",
   :var-type "macro",
   :line 42,
   :file "src/ciste/core.clj"}
  {:arglists ([format & body]),
   :name "with-format",
   :namespace "ciste.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.core-api.html#ciste.core/with-format",
   :doc "Set the bindings for the format",
   :var-type "macro",
   :line 36,
   :file "src/ciste/core.clj"}
  {:arglists ([serialization & body]),
   :name "with-serialization",
   :namespace "ciste.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.core-api.html#ciste.core/with-serialization",
   :doc "Set the bindings for the serialization.",
   :var-type "macro",
   :line 30,
   :file "src/ciste/core.clj"}
  {:arglists ([sym]),
   :name "spy",
   :namespace "ciste.debug",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.debug-api.html#ciste.debug/spy",
   :doc
   "Wrap an expression in this macro to log the expression followed by the\npretty-printed version of the result.\n\nUseful for quickly logging the value of a variable or simple expression.",
   :var-type "macro",
   :line 13,
   :file "src/ciste/debug.clj"}
  {:arglists ([f expr]),
   :name "with-time",
   :namespace "ciste.debug",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.debug-api.html#ciste.debug/with-time",
   :doc
   "Evaluates expr and calls f with timing info. Returns the value of expr.",
   :var-type "macro",
   :line 25,
   :file "src/ciste/debug.clj"}
  {:arglists ([action serialization binding-form & body]),
   :name "deffilter",
   :namespace "ciste.filters",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.filters-api.html#ciste.filters/deffilter",
   :doc
   "Define a filter for the Action for the given serialization type.\n\nWhen a route is being resolved, the filter will be called instead of the\naction.\n\nIt is the job of the filter to deserialize the request object and call the\nprovided action function with the required arguments.",
   :var-type "macro",
   :line 42,
   :file "src/ciste/filters.clj"}
  {:arglists ([action request]),
   :name "filter-action-dispatch",
   :namespace "ciste.filters",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.filters-api.html#ciste.filters/filter-action-dispatch",
   :doc
   "Dispatch function for filter-action.\n\nReturns a vector containing the Action (the first param) and the\n:serialization key from the second param (The request object).",
   :var-type "function",
   :line 30,
   :file "src/ciste/filters.clj"}
  {:arglists ([action wrappers]),
   :name "apply-wrappers",
   :namespace "ciste.middleware",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.middleware-api.html#ciste.middleware/apply-wrappers",
   :doc "wraps the action with middleware contained in wrappers",
   :var-type "function",
   :line 20,
   :file "src/ciste/middleware.clj"}
  {:arglists ([handler]),
   :name "with-request-logging",
   :namespace "ciste.middleware",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.middleware-api.html#ciste.middleware/with-request-logging",
   :doc "Log each request",
   :var-type "function",
   :line 13,
   :file "src/ciste/middleware.clj"}
  {:arglists ([request matcher]),
   :name "method-matches?",
   :namespace "ciste.predicates",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.predicates-api.html#ciste.predicates/method-matches?",
   :doc
   "Test if the method key of the request matches the method key of the handler",
   :var-type "function",
   :line 18,
   :file "src/ciste/predicates.clj"}
  {:arglists ([request matcher]),
   :name "name-matches?",
   :namespace "ciste.predicates",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.predicates-api.html#ciste.predicates/name-matches?",
   :doc
   "Test if the name key of the request matches the name key of the handler",
   :var-type "function",
   :line 24,
   :file "src/ciste/predicates.clj"}
  {:arglists ([request]),
   :name "invoke-action",
   :namespace "ciste.routes",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.routes-api.html#ciste.routes/invoke-action",
   :doc "Renders the given action against the request",
   :var-type "function",
   :line 133,
   :file "src/ciste/routes.clj"}
  {:arglists ([coll]),
   :name "lazier",
   :namespace "ciste.routes",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.routes-api.html#ciste.routes/lazier",
   :doc
   "This ensures that the lazy-seq will not be chunked\n\nContributed via dnolan on IRC.",
   :var-type "function",
   :line 73,
   :file "src/ciste/routes.clj"}
  {:arglists
   ([predicates
     [matcher {:keys [action format serialization]}]
     request]),
   :name "resolve-route",
   :namespace "ciste.routes",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.routes-api.html#ciste.routes/resolve-route",
   :doc "If the route matches the predicates, invoke the action",
   :var-type "function",
   :line 149,
   :file "src/ciste/routes.clj"}
  {:arglists ([predicates routes]),
   :name "resolve-routes",
   :namespace "ciste.routes",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.routes-api.html#ciste.routes/resolve-routes",
   :doc
   "Returns a handler fn that will match each route against\nthe predicate sequence and return the result of the invoking the\nfirst match.",
   :var-type "function",
   :line 162,
   :file "src/ciste/routes.clj"}
  {:arglists ([request matcher predicate]),
   :name "try-predicate",
   :namespace "ciste.routes",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.routes-api.html#ciste.routes/try-predicate",
   :doc
   "Tests if the request and matcher info matches the predicate.\n\nIf the predicate is a sequence, test the first first element. If that test\nsucceeds, continue with the remainder of the sequence.\n\nIf the predicate is a function, apply that function against the request and\nmatcher.\n\nIf the request is still non-nil after walking the entire predicate sequence,\nthen the route is considered to have passed.",
   :var-type "function",
   :line 95,
   :file "src/ciste/routes.clj"}
  {:arglists ([request matcher predicates]),
   :name "try-predicates",
   :namespace "ciste.routes",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.routes-api.html#ciste.routes/try-predicates",
   :doc
   "Tests if the request and the matcher info matches the provided predicates.\n\nReturns either a (possibly modified) request map if successful, or nil.",
   :var-type "function",
   :line 120,
   :file "src/ciste/routes.clj"}
  {:arglists ([name & opts]),
   :name "declare-section",
   :namespace "ciste.sections",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.sections-api.html#ciste.sections/declare-section",
   :doc "Setup a section with the given name",
   :var-type "macro",
   :line 65,
   :file "src/ciste/sections.clj"}
  {:arglists ([record & others]),
   :name "record-class",
   :namespace "ciste.sections",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.sections-api.html#ciste.sections/record-class",
   :doc "Returns the class of the first parameter",
   :var-type "function",
   :line 35,
   :file "src/ciste/sections.clj"}
  {:arglists ([record format & others]),
   :name "record-class-format",
   :namespace "ciste.sections",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.sections-api.html#ciste.sections/record-class-format",
   :doc "Returns the class of the first parameter",
   :var-type "function",
   :line 55,
   :file "src/ciste/sections.clj"}
  {:arglists ([records & others]),
   :name "record-class-seq",
   :namespace "ciste.sections",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.sections-api.html#ciste.sections/record-class-seq",
   :doc
   "Returns the class of the first element of the first parameter",
   :var-type "function",
   :line 40,
   :file "src/ciste/sections.clj"}
  {:arglists ([records format & others]),
   :name "record-class-seq-format",
   :namespace "ciste.sections",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.sections-api.html#ciste.sections/record-class-seq-format",
   :doc
   "Returns the class of the first element of the first parameter",
   :var-type "function",
   :line 60,
   :file "src/ciste/sections.clj"}
  {:arglists ([records format serialization & others]),
   :name "record-class-seq-serialization",
   :namespace "ciste.sections",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.sections-api.html#ciste.sections/record-class-seq-serialization",
   :doc
   "Returns the class of the first element of the first parameter",
   :var-type "function",
   :line 50,
   :file "src/ciste/sections.clj"}
  {:arglists ([record format serialization & others]),
   :name "record-class-serialization",
   :namespace "ciste.sections",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.sections-api.html#ciste.sections/record-class-serialization",
   :doc "Returns the class of the first parameter",
   :var-type "function",
   :line 45,
   :file "src/ciste/sections.clj"}
  {:arglists ([action trigger]),
   :name "add-trigger!",
   :namespace "ciste.triggers",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.triggers-api.html#ciste.triggers/add-trigger!",
   :doc "Register a new trigger",
   :var-type "function",
   :line 59,
   :file "src/ciste/triggers.clj"}
  {:arglists ([action & args]),
   :name "run-triggers",
   :namespace "ciste.triggers",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.triggers-api.html#ciste.triggers/run-triggers",
   :doc "Run all triggers for the action",
   :var-type "function",
   :line 77,
   :file "src/ciste/triggers.clj"}
  {:arglists ([] [thread-count]),
   :name "set-thread-pool!",
   :namespace "ciste.triggers",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/ciste.triggers-api.html#ciste.triggers/set-thread-pool!",
   :doc "Set the number of executors for processing triggers",
   :var-type "function",
   :line 42,
   :file "src/ciste/triggers.clj"}
  {:file "src/ciste/views.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/ciste.views-api.html#ciste.views/apply-view",
   :namespace "ciste.views",
   :line 26,
   :var-type "var",
   :doc "Return a transformed response map for the action and format",
   :name "apply-view"}
  {:arglists ([action format args & body]),
   :name "defview",
   :namespace "ciste.views",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.views-api.html#ciste.views/defview",
   :doc "Define a view for the action with the specified format",
   :var-type "macro",
   :line 33,
   :file "src/ciste/views.clj"}
  {:arglists ([]),
   :name "current-worker",
   :namespace "ciste.workers",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.workers-api.html#ciste.workers/current-worker",
   :doc "Returns the worker currently running on this thread",
   :var-type "function",
   :line 46,
   :file "src/ciste/workers.clj"}
  {:arglists ([name args & body]),
   :name "defworker",
   :namespace "ciste.workers",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.workers-api.html#ciste.workers/defworker",
   :doc "Define a worker named `name'",
   :var-type "macro",
   :line 111,
   :file "src/ciste/workers.clj"}
  {:arglists ([]),
   :name "stop-all-workers!",
   :namespace "ciste.workers",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.workers-api.html#ciste.workers/stop-all-workers!",
   :doc "Tell all workers to stop",
   :var-type "function",
   :line 132,
   :file "src/ciste/workers.clj"}
  {:arglists ([id]),
   :name "stop-worker!",
   :namespace "ciste.workers",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.workers-api.html#ciste.workers/stop-worker!",
   :doc "Stop the worker with the given name",
   :var-type "function",
   :line 126,
   :file "src/ciste/workers.clj"}
  {:arglists ([]),
   :name "worker-keys",
   :namespace "ciste.workers",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/ciste.workers-api.html#ciste.workers/worker-keys",
   :doc "Returns a sequence of registered worker types",
   :var-type "function",
   :line 60,
   :file "src/ciste/workers.clj"})}
